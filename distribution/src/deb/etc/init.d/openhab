#! /bin/sh
### BEGIN INIT INFO
# Provides:          openhab
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: openhab server
# Description:       Start / Stop openhab server
### END INIT INFO

# Author: Theo Weiss <theo.weiss@gmail.com>
#

PATH=/sbin:/usr/sbin:/bin:/usr/bin:/usr/local/bin


DESC="openhab server"
NAME=openhab
OPENHAB_DIR="/opt/openhab"
OPENHAB_CONF_DIR="/etc/openhab"
OPENHAB_LOG_DIR="/var/log/openhab"
OPENHAB_WORKSPACE_DIR="/var/lib/openhab"
JAVA="/usr/bin/java"
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME

LAUNCHER=`ls /opt/openhab/server/plugins/org.eclipse.equinox.launcher_*.jar`

# Exit if the package is not installed
[ -r "$LAUNCHER" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

if [ x"${OPENHAB_JAVA}" != x ]; then
	JAVA="${OPENHAB_JAVA}"
fi

if [ x"${USER_AND_GROUP}" != x ]; then
	EXTRA_ARGS="-c "${USER_AND_GROUP}" --background --make-pidfile --chdir ${OPENHAB_DIR}"
	chown -R ${USER_AND_GROUP} "${OPENHAB_LOG_DIR}"
	chown -R ${USER_AND_GROUP} "${OPENHAB_WORKSPACE_DIR}"
else
	EXTRA_ARGS="--background --make-pidfile --chdir ${OPENHAB_DIR}"
fi


# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh


JAVA_ARGS="-Dosgi.clean=true -Declipse.ignoreApp=true -Dosgi.noShutdown=true -Djetty.port=${HTTP_PORT} \
 -Dopenhab.configfile="${OPENHAB_CONF_DIR}/configurations/openhab.cfg" \
 -Dopenhab.configdir="${OPENHAB_CONF_DIR}/configurations" \
 -Dopenhab.logdir="${OPENHAB_LOG_DIR}" \
 -Djetty.home="${OPENHAB_DIR}" \
 -Djetty.port.ssl=${HTTPS_PORT} -Djetty.config="${OPENHAB_CONF_DIR}/jetty" \
 -Djetty.logs="${OPENHAB_LOG_DIR}" -Djetty.rundir="${OPENHAB_DIR}" \
 -Dlogback.configurationFile="${OPENHAB_CONF_DIR}"/logback.xml \
 -Dfelix.fileinstall.dir="${OPENHAB_DIR}"/addons -Djava.library.path="${OPENHAB_DIR}"/lib \
 -Djava.security.auth.login.config="${OPENHAB_CONF_DIR}"/login.conf \
 -Dorg.quartz.properties="${OPENHAB_CONF_DIR}"/quartz.properties -Djava.awt.headless=true \
 -jar ${LAUNCHER} \
 -configuration ${OPENHAB_WORKSPACE_DIR} \
 -data ${OPENHAB_WORKSPACE_DIR} \
 -console ${TELNET_PORT}"

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#

do_start()
{
		if [ x"${USER_AND_GROUP}" != x ]; then
			chown -R ${USER_AND_GROUP} "${OPENHAB_LOG_DIR}"
			chown -R ${USER_AND_GROUP} "${OPENHAB_WORKSPACE_DIR}"
		fi
        # Return
        #   0 if daemon has been started
        #   1 if daemon was already running
        #   2 if daemon could not be started
        start-stop-daemon --start --quiet --pidfile $PIDFILE $EXTRA_ARGS --exec $JAVA -- \
                $JAVA_ARGS \
                || return 2
}

#
# Function that stops the daemon/service
#
do_stop()
{
        # Return
        #   0 if daemon has been stopped
        #   1 if daemon was already stopped
        #   2 if daemon could not be stopped
        #   other if a failure occurred
        start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
        RETVAL="$?"
        # Many daemons don't delete their pidfiles when they exit.
        rm -f $PIDFILE
        return "$RETVAL"
}


case "$1" in
  start)
        [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  stop)
        [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
                2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
        esac
        ;;
  status)
        status_of_proc "$JAVA" "$NAME" && exit 0 || exit $?
        ;;
  restart|force-reload)
        #
        # If the "reload" option is implemented then remove the
        # 'force-reload' alias
        #
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac

